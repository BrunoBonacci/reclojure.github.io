{"version":3,"sources":["portal/runtime.cljc"],"mappings":"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","names":["js/portal","js/portal.runtime","js/portal.runtime.*options*","portal.runtime/*options*","js/portal.runtime.id","portal.runtime/id","cljs.core.atom","portal.runtime/next-id","cljs.core.swap_BANG_","cljs.core/inc","js/portal.runtime.request","portal.runtime/request","js/portal.runtime.selected","portal.runtime/selected","portal.runtime/set-timeout","f","timeout","js/setTimeout","portal.runtime/broadcast-change","_watch-key","a","old","new","cljs.core._EQ_","cljs.core/deref","temp__5753__auto__","request","G__70113","portal.runtime/atom?","o","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IAtom","js/portal.runtime.watch-registry","portal.runtime/watch-registry","cljs.core/add-watch","portal.runtime/watch-atom","cljs.core/contains?","atoms","_old","_new","cljs.core/update","cljs.core.assoc","portal.runtime/value->id","value","k","cache","id","cljs.core.get","portal.runtime/value->id?","portal.runtime/id->value","portal.runtime/to-object","tag","rep","portal.runtime.cson.tag","portal.runtime.cson/to-json","cljs.core.pr_str","cljs.core/type","*print-length*-orig-val__70115","*print-level*-orig-val__70116","*print-length*-temp-val__70117","*print-level*-temp-val__70118","cljs.core/*print-length*","cljs.core/*print-level*","goog.object/set","portal.runtime.cson/ToJson","portal.runtime.cson/-to-json","portal.runtime/var->symbol","v","m","cljs.core/meta","cljs.core.symbol","cljs.core/Var","portal.runtime/limit-seq","cljs.core/seq?","vec__70119","cljs.core.nth","limit","realized","remaining","cljs.core/split-at","cljs.core/with-meta","cljs.core.merge","cljs.core/seq","G__70122","portal.runtime/can-meta?","portal.runtime/id-coll","cljs.core/coll?","temp__5751__auto__","portal.runtime.cson/->Tagged","cljs.core.vary_meta","cljs.core/merge","G__70126","cljs.core/record?","portal.runtime/write","options","*options*-orig-val__70128","*options*-temp-val__70129","portal.runtime.cson.write","cljs.core.comp","portal.runtime/ref->","cljs.core/second","portal.runtime/read","string","*options*-orig-val__70130","*options*-temp-val__70131","portal.runtime.cson.read","G__70132","cljs.core/first","portal.runtime.cson/json->","js/portal.runtime.state","portal.runtime/state","js/portal.runtime.tap-list","portal.runtime/tap-list","portal.runtime/update-value","new-value","cljs.core/conj","var_args","G__70134","portal.runtime/clear-values","js/Error","portal.runtime.clear_values","cljs.core/identity","_request","done","cljs.core/reset!","seq__70135","chunk__70136","count__70137","i__70138","vec__70145","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__70148","cljs.core/next","cljs.core/remove-watch","portal.runtime/update-selected","portal.runtime/predicates","p1__70152#","cljs.core/IDeref","portal.runtime/public-fns","cljs.core/pr-str","clojure.datafy/datafy","portal.runtime/get-functions","cljs.core/keys","cljs.core/reduce-kv","fns","s","predicate","cljs.core.dissoc","portal.runtime/get-tap-atom","portal.runtime/ping","portal.runtime/fns","clojure.datafy/nav","p__70155","map__70156","cljs.core/--destructure-map","portal.runtime/invoke","args","e70157","cljs.core/Symbol","js/Promise.resolve","return","cljs.core.apply","G__70159","e","G__70158","portal.runtime/ops","cljs.core/List"],"sourcesContent":["(ns portal.runtime\n  (:refer-clojure :exclude [read])\n  (:require [clojure.datafy :refer [datafy nav]]\n            [portal.runtime.cson :as cson]\n            #?(:clj  [portal.sync  :as a]\n               :cljs [portal.async :as a]))\n  #?(:clj (:import [java.io File]\n                   [java.net URI URL])))\n\n(defonce ^:dynamic *options* nil)\n(defonce ^:private id (atom 0))\n(defn- next-id [] (swap! id inc))\n\n(defonce request (atom nil))\n(defonce selected (atom nil))\n\n(defn- set-timeout [f timeout]\n  #?(:clj  (future (Thread/sleep timeout) (f))\n     :cljs (js/setTimeout f timeout)))\n\n(defn broadcast-change [_watch-key a old new]\n  (when-not (= old new)\n    (set-timeout\n     #(when (= @a new)\n        (when-let [request @request]\n          (request {:op :portal.rpc/update-versions :body new})))\n     100)))\n\n(defn- atom? [o]\n  #?(:clj  (instance? clojure.lang.Atom o)\n     :cljs (satisfies? cljs.core/IAtom o)))\n\n(defonce ^:private watch-registry (atom {}))\n(add-watch watch-registry ::watch-key #'broadcast-change)\n\n(defn- watch-atom [a]\n  (when-not (contains? @watch-registry a)\n    (swap!\n     watch-registry\n     (fn [atoms]\n       (if (contains? atoms a)\n         atoms\n         (do\n           (add-watch\n            a\n            ::watch-key\n            (fn [_watch-key a _old _new]\n              (swap! watch-registry update a inc)))\n           (assoc atoms a 0)))))))\n\n(defn- value->id [value]\n  (let [k [:value value]]\n    (-> (:value-cache *options*)\n        (swap!\n         (fn [cache]\n           (if (contains? cache k)\n             cache\n             (let [id (next-id)]\n               (assoc cache [:id id] value k id)))))\n        (get k))))\n\n(defn- value->id? [value]\n  (get @(:value-cache *options*) [:value value]))\n\n(defn- id->value [id]\n  (get @(:value-cache *options*) [:id id]))\n\n(defn- to-object [value tag rep]\n  (when (atom? value) (watch-atom value))\n  (cson/tag\n   \"object\"\n   (cson/to-json\n    {:id     (value->id value)\n     :type   (pr-str (type value))\n     :tag    tag\n     :rep    rep\n     :pr-str (binding [*print-length* 10\n                       *print-level* 2]\n               (pr-str value))})))\n\n(extend-type #?(:clj Object :cljs default)\n  cson/ToJson\n  (-to-json [value]\n    (to-object value :object nil)))\n\n(defn- var->symbol [v]\n  (let [m (meta v)]\n    (symbol (str (:ns m)) (str (:name m)))))\n\n#?(:bb (def clojure.lang.Var (type #'type)))\n\n(extend-type #?(:clj  clojure.lang.Var\n                :cljs cljs.core/Var)\n  cson/ToJson\n  (-to-json [value]\n    (to-object value :var (var->symbol value))))\n\n#?(:clj\n   (extend-type clojure.lang.Ratio\n     cson/ToJson\n     (-to-json [value]\n       (to-object value\n                  :ratio\n                  [(numerator value)\n                   (denominator value)]))))\n\n(defn limit-seq [value]\n  (if-not (seq? value)\n    value\n    (let [m     (meta value)\n          limit (get m ::more-limit 100)\n          [realized remaining] (split-at limit value)]\n      (with-meta\n        realized\n        (merge\n         m\n         (when (seq remaining)\n           {::more #(limit-seq (with-meta remaining m))}))))))\n\n(defn- can-meta? [value]\n  #?(:clj  (instance? clojure.lang.IObj value)\n     :cljs (implements? IMeta value)))\n\n(defn- id-coll [value]\n  (if-not (and (coll? value)\n               (can-meta? value))\n    value\n    (if-let [id (value->id? value)]\n      (cson/->Tagged \"ref\" id)\n      (vary-meta value\n                 merge\n                 (cond-> {::id (value->id value)}\n                   (record? value)\n                   (assoc ::type (type value)))))))\n\n(defn write [value options]\n  (binding [*options* options]\n    (cson/write\n     value\n     {:transform (comp limit-seq id-coll)})))\n\n(defn- ref-> [value]\n  (id->value (second value)))\n\n(defn read [string options]\n  (binding [*options* options]\n    (cson/read\n     string\n     {:default-handler\n      (fn [value]\n        (case (first value)\n          \"ref\"    (ref-> value)\n          (cson/->Tagged (first value) (cson/json-> (second value)))))})))\n\n(defonce state    (atom {:portal.launcher/window-title \"portal\"}))\n(defonce tap-list (atom (list)))\n\n(defn update-value [new-value]\n  (swap! tap-list conj new-value))\n\n(defn clear-values\n  ([] (clear-values nil identity))\n  ([_request done]\n   (reset! id 0)\n   (reset! tap-list (list))\n   (reset! (:value-cache *options*) {})\n   (doseq [[a] @watch-registry]\n     (remove-watch a ::watch-key))\n   (reset! watch-registry {})\n   (done nil)))\n\n(defn- update-selected [value]\n  (reset! selected value))\n\n(def ^:private predicates\n  (merge\n   {'clojure.core/deref\n    #?(:clj  #(instance? clojure.lang.IRef %)\n       :cljs #(satisfies? cljs.core/IDeref %))}\n   #?(:clj\n      {'clojure.core/slurp\n       #(or (instance? URI %)\n            (instance? URL %)\n            (and (instance? File %)\n                 (.isFile ^File %)\n                 (.canRead ^File %)))})))\n\n(def ^:private public-fns\n  (merge\n   {'clojure.core/pr-str   #'pr-str\n    'clojure.core/deref    #'deref\n    'clojure.core/type     #'type\n    'clojure.datafy/datafy #'datafy}\n   #?(:clj {`slurp slurp\n            `bean  bean})))\n\n(defn- get-functions [v]\n  (keys\n   (reduce-kv\n    (fn [fns s predicate]\n      (if (predicate v)\n        fns\n        (dissoc fns s)))\n    public-fns\n    predicates)))\n\n(defn- get-tap-atom [] tap-list)\n\n(defn- ping [] ::pong)\n\n(def ^:private fns\n  (merge\n   public-fns\n   {'clojure.datafy/nav  #'nav\n    `ping                #'ping\n    `get-tap-atom        #'get-tap-atom\n    `clear-values        #'clear-values\n    `update-selected     #'update-selected\n    `get-functions       #'get-functions}))\n\n(defn invoke [{:keys [f args]} done]\n  (try\n    (let [f (if (symbol? f) (get fns f) f)]\n      (a/let [return (apply f args)]\n        (done {:return return})))\n    (catch #?(:clj Exception :cljs js/Error) e\n      (done {:return e}))))\n\n(def ops {:portal.rpc/invoke #'invoke})\n"]}